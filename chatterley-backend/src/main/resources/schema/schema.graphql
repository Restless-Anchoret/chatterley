scalar DateTime

# queries

type Query {
    user(id: ID): User
    users(first: Int!, after: String, nickNameFilter: String): UserConnection!

    chat(id: ID!): Chat
    chats(first: Int!, after: String!): ChatConnection!
}

type PageInfo {
    startCursor: String
    endCursor: String
    hasNextPage: Boolean!
}

type User {
    id: ID!
    nickName: String!
    avatar: Image
    chats(first: Int!, after: String): ChatConnection
}

type UserConnection {
    edges: [UserEdge!]!
    pageInfo: PageInfo!
}

type UserEdge {
    cursor: String!
    node: User!
}

type Image {
    urls: [ImageUrl!]!
}

type ImageUrl {
    alias: String!
    url: String!
}

type Chat {
    id: ID!
    type: ChatType!
    participants: [User!]!
    messages(first: Int!, after: String): MessageConnection
}

type ChatConnection {
    edges: [ChatEdge!]!
    pageInfo: PageInfo!
}

type ChatEdge {
    cursor: String!
    node: Chat!
}

enum ChatType {
    PERSONAL
    DIALOG
    GROUP
}

type Message {
    id: ID!
    author: User!
    chat: Chat!
    text: String!
    createTime: DateTime!
}

type MessageConnection {
    edges: [MessageEdge!]!
    pageInfo: PageInfo!
}

type MessageEdge {
    cursor: String!
    node: Message!
}

# mutations

type Mutation {
    addMessage(input: AddMessageInput): Message!
}

input AddMessageInput {
    chatId: ID!
    text: String!
}
